#!/bin/sh

load_env() {
  ENV_FILE="$(git rev-parse --show-toplevel)/.env"
  [ -f "$ENV_FILE" ] && . "$ENV_FILE" || { echo "Error: .env file not found."; exit 1; }
  : "${API_KEY:?API_KEY is missing in .env}"
  : "${TOKEN:?TOKEN is missing in .env}"
  : "${BOARD_NAME:?BOARD_NAME is missing in .env}"
  : "${BOARDS_URL:?BOARDS_URL is missing in .env}"
  : "${CARDS_URL:?CARDS_URL is missing in .env}"
  : "${COMMENT_URL:?COMMENT_URL is missing in .env}"
  : "${GITHUB_REPO:?GITHUB_REPO is missing in .env}"
  : "${GITHUB_COMMIT_CUSTOM_FIELD_ID:?GITHUB_COMMIT_CUSTOM_FIELD_ID is missing in .env}"
}

validate_commit_msg() {
  COMMIT_MSG=$(cat "$1")
  echo "$COMMIT_MSG" | grep -qP '^\[\d+\]\[[A-Za-z]+\]' || { echo "Error: Commit message must include [id][Type]."; exit 1; }
  echo "$COMMIT_MSG"
}

fetch_board_id() {
  BOARDS_URL_RESOLVED=$(echo "$BOARDS_URL" | sed "s/{API_KEY}/$API_KEY/;s/{TOKEN}/$TOKEN/")
  curl -s "$BOARDS_URL_RESOLVED" | jq -r ".[] | select(.name == \"$BOARD_NAME\") | .id"
}

fetch_card_details() {
  CARDS_URL_RESOLVED=$(echo "$CARDS_URL" | sed "s/{BOARD_ID}/$1/;s/{API_KEY}/$API_KEY/;s/{TOKEN}/$TOKEN/")
  curl -s "$CARDS_URL_RESOLVED" | jq -r ".[] | select(.idShort == $2)"
}

fetch_custom_field_items() {
  CUSTOM_FIELDS_URL="https://api.trello.com/1/cards/$1/customFieldItems?key=$API_KEY&token=$TOKEN"
  curl -s "$CUSTOM_FIELDS_URL" | jq -r ".[] | select(.idCustomField == \"$GITHUB_COMMIT_CUSTOM_FIELD_ID\") | .value.text"
}

create_custom_field() {
  curl -s -X POST -H "Content-Type: application/json" -d "{\"name\": \"Commits\", \"type\": \"text\"}" \
    "https://api.trello.com/1/boards/$1/customFields?key=$API_KEY&token=$TOKEN" | jq -r '.id'
}

update_custom_field() {
  CARD_ID=$1
  FIELD_VALUE=$2
  curl -s -X PUT -H "Content-Type: application/json" -d "{\"value\": {\"text\": \"$FIELD_VALUE\"}}" \
    "https://api.trello.com/1/cards/$CARD_ID/customField/$GITHUB_COMMIT_CUSTOM_FIELD_ID/item?key=$API_KEY&token=$TOKEN" > /dev/null
}

add_comment() {
  COMMENT_URL_RESOLVED=$(echo "$COMMENT_URL" | sed "s/{CARD_ID}/$1/;s/{API_KEY}/$API_KEY/;s/{TOKEN}/$TOKEN/")
  curl -s -X POST -H "Content-Type: application/json" -d "{\"text\": \"$2\"}" "$COMMENT_URL_RESOLVED" > /dev/null
}

add_label() {
  LABEL_ID=$(curl -s "https://api.trello.com/1/boards/$1/labels?key=$API_KEY&token=$TOKEN" | jq -r ".[] | select(.name == \"$2\") | .id")
  if [ -z "$LABEL_ID" ]; then
    LABEL_ID=$(curl -s -X POST -H "Content-Type: application/json" -d "{\"name\": \"$2\", \"color\": \"$3\"}" "https://api.trello.com/1/boards/$1/labels?key=$API_KEY&token=$TOKEN" | jq -r '.id')
  fi
  curl -s -X POST -H "Content-Type: application/json" -d "{\"value\": \"$LABEL_ID\"}" "https://api.trello.com/1/cards/$4/idLabels?key=$API_KEY&token=$TOKEN" > /dev/null
}

load_env
COMMIT_MSG=$(validate_commit_msg "$1")
ID_SHORT=$(echo "$COMMIT_MSG" | grep -oP '^\[\d+\]' | grep -oP '\d+')
BOARD_ID=$(fetch_board_id)
[ -z "$BOARD_ID" ] && { echo "Error: Trello board not found."; exit 1; }
CARD_DETAILS=$(fetch_card_details "$BOARD_ID" "$ID_SHORT")
[ -z "$CARD_DETAILS" ] && { echo "Error: Trello card not found."; exit 1; }
CARD_ID=$(echo "$CARD_DETAILS" | jq -r '.id')
REPO_URL="https://github.com/$GITHUB_REPO/commit/$(git rev-parse HEAD)"

add_comment "$CARD_ID" "Commit linked: $COMMIT_MSG ($REPO_URL)"
add_label "$BOARD_ID" "Commit Linked" "green" "$CARD_ID"

CUSTOM_FIELD_VALUE=$(fetch_custom_field_items "$CARD_ID")
if [ -z "$CUSTOM_FIELD_VALUE" ]; then
  update_custom_field "$CARD_ID" "$REPO_URL"
else
  NEW_VALUE="$CUSTOM_FIELD_VALUE\n$REPO_URL"
  update_custom_field "$CARD_ID" "$NEW_VALUE"
fi

echo "Commit successfully linked to Trello card $ID_SHORT and custom field updated."
